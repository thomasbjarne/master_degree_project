We aim to create the a set of modules containing general procedures (and derived types).
The goal is that they may be used for different types of IBVP.

The modules are:

mod_initial_data
mod_finite_diff
mod_runge_kutta
mod_derived_types
mod_io
mod_parallel
mod_godunov_fv

Details:

mod_initial_data: 
    Contains a real function of one variable and a real function of two variables.

mod_finite_diff:
    Contains central difference scheme for node function of one variable
    and for node function of two variables.

    The schemes may use periodic boundaries or, if this is not the desired result, 
    set the boundary values of the spatial derivative to be zero.

mod_runge_kutta:
    Contains rk4 subroutine for rank 1 arrays and for rank 2 arrays, which provides energy stable time stepping.

    The subroutines take in u_0, tmin, tmax, and k (temporal time step).

    Fortran does not allow passing functions as arguments. Therefore the time derivative function F(u, t) is 
    also included in the module. This allows the rk4 schemes to reference F(u) without interface blocks
    or other nuances. We found this to be the most flexible setup
    
    t and u are both optional arguments in F(u,t).

mod_derived_types:
    Contains pracitcal derived types.

mod_io:
    Contains the subroutine write_to_file which takes a real rank 2 array as input and writes its values to
    data/datafile.txt. Note that the subdirectory data must already before calling the procedure.

    Additionally, a by default commented line may execute a cmd line command calling gnuplot to plot a pre-existsing .plt file.

mod_parallel:
    Contains all subroutines and functions required to parallelize a program which computes on large arrays. 
    
    In particular, the main functionality of the procedures is to equally divide arrays into sub-arrays. The idea is that
    each image (cpu) will calculate the given schemes for their sub-array, and then report back their solutions. In theory
    this should speed up the runtime of some program.

mod_godunov_fv:
    Contains a subroutine encompassing a general godunov FV scheme in which we reconstruct the pointwise values,
    and use a Riemann solver for approximating the flux, which is then used in the time stepping.