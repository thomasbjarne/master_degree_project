----------------------
! test arnoldi_iteration

real, dimension(10,10) :: A
real, dimension(:,:), allocatable :: Q, H, H_n
integer :: i, n = 5

allocate(Q(size(A,1), n+1), H(n+1, n), H_n(n, n))

A = -192
do i = 1, size(A,2)
    A(i,i) = 4
end do
A(1,2) = 2

call arnoldi_iteration(A, n, Q, H)
call write_to_file(Q, 1)
call write_to_file(H, 2)

H_n = H(1:n, 1:n)
call write_to_file(H_n, 3)


---------------------
! test qr_decomposition

    real(real64), dimension(10,10) :: A
    real(real64), dimension(:,:), allocatable :: Q, R
    integer :: i

    allocate( Q(size(A,1), size(A,2)), R(size(A,1), size(A,2)) )
    A = -192
    do i = 1, size(A,2)
        A(i,i) = 4
    end do
    A(1,2) = 2

    call qr_decomposition(A, Q, R)
    call write_to_file(Q, 1)
    call write_to_file(R, 2)
    call write_to_file(matmul(Q, R), 3)
    call write_to_file(A, 4)


---------------------
! test qr_algorithm

    real(real64), dimension(:,:), allocatable :: A, A_schur
    integer :: i, n = 10

    allocate( A(n,n), A_schur(n,n))

    A = 7
    do i = 1, n
        A(i,i) = 4
    end do

    A(2, 4) = 2
    A(1, 2) = -5
    A(3, 1) = 29

    A_schur = qr_algorithm(A)

    call write_to_file(A_schur, 1)

-----------
! test backwards_subst

    real(real64), dimension(:,:), allocatable :: R
    real(real64), dimension(:), allocatable :: b, x  
    integer :: i, n = 5

    allocate( R(n,n), b(n), x(n))

    R = 0
    do i = 1, n
        R(i,i:n) = 24
    end do
    R(1,2) = 14
    R(1,3) = -332
    R(2,3) = 45
    R(3,4) = -99
    R(n,n) = 13

    b = 13

    x = backwards_subst(R,b)

    call write_to_file(R, 1)
    call write_to_file(matmul(R,x), 2)
    call write_to_file(b, 3)

-------------
! test upper_hessenberg

    real(real64), dimension(10,10) :: A, H
    integer :: i

    A = -192
    do i = 1, size(A,2)
        A(i,i) = 4
    end do
    A(1,2) = 2
    A(9,2) = 5
    A(9,7) = 2784

    H = upper_hessenberg(A)

    call write_to_file(H,1)

-----------------------
! test inverse_iteration

    real(real64), dimension(:,:), allocatable :: A, A_schur, lambda, R, AR, lambdaR
    integer :: i, n = 10

    allocate( A(n,n), A_schur(n,n), lambda(n,n), R(n,n), AR(n,n), lambdaR(n,n))

    A = 9
    do i = 1, n
        A(i,i) = 4
    end do

    A(2, 4) = 2
    A(1, 2) = -5
    A(3, 1) = 29

    A_schur = qr_algorithm(A)

    call write_to_file(A_schur, 1)

    lambda = 0
    do concurrent (i = 1:n)
        lambda(i,i) = A_schur(i,i)
    end do

    R = inverse_iteration(A,lambda)

    call write_to_file(R,2)

    !Test R(:,i) * lambda(i,i) = A * R(:,i) (verify eigenvec and eigenval)
    do concurrent (i=1:n)
        AR(:,i) = matmul(A, R(:,i))
        lambdaR(:,i) = lambda(i,i) * R(:,i)
    end do

    call write_to_file(AR, 3)
    call write_to_file(lambdaR, 4)

--------------------------------
! test linear_system_solver

    real(real64), dimension(:,:), allocatable :: A
    real(real64), dimension(:), allocatable :: b, x  
    integer :: i, n = 20

    allocate( A(n,n), b(n), x(n))

    A = 215
    do i = 1, n
        A(i,i:n) = 24
    end do
    A(n,n) = 13
    A(1,2) = -115
    A(1,3) = 0
    A(2,2) = -99

    b(1:n) = [(i, i = 1, n)]

    x = linear_system_solver(A,b)
    
    call write_to_file(x, 1)
    call write_to_file(matmul(A,x), 2)
    call write_to_file(b, 3)

---------------------------------
! test forwards_subst

    real(real64), dimension(:,:), allocatable :: L
    real(real64), dimension(:), allocatable :: b, x
    integer :: i, n

    n = 5
    allocate( L(n,n), b(n), x(n))

    L = 0
    do i = 1, n
        L(i,i) = 2
    end do
    L(2,1) = -53
    L(3,1) = 31
    L(3,2) = -885
    L(4,1) = 8
    L(4,2) = 79
    L(4,3) = -44

    b(1:n) = [(i, i = 1,n)] 
    x = forwards_subst(L, b)

    call write_to_file(L, 1)
    call write_to_file(matmul(L, x), 2)
    call write_to_file(b, 3)