We aim to create the a set of modules containing general procedures (and derived types).
The goal is that they may be used for different types of IBVP.

The modules are:

mod_finite_diff
mod_runge_kutta
mod_derived_types
mod_io
mod_parallel
mod_linalg
mod_riemann_solver

Details:

mod_finite_diff:
    Contains central difference scheme for node function of one variable
    and for node function of two variables.

    The schemes may use periodic boundaries or, if this is not the desired result, 
    set the boundary values of the spatial derivative to be zero.

    More finite diff methods/schemes should be implemented later.

mod_runge_kutta:
    Contains rk4 subroutine for rank 1 arrays and for rank 2 arrays, which provides energy stable time stepping.

    The subroutines take in u_0, tmin, tmax, and k (temporal time step).

mod_derived_types:
    Contains practical derived types.

mod_io:
    Contains the subroutine write_to_file which writes input arg to
    data/datafile(data_slot).txt. Note that the subdirectory data must already exist before calling the procedure.

mod_parallel:
    Contains all subroutines and functions required to parallelize a program which computes on large arrays. 
    
    In particular, the main functionality of the procedures is to equally divide arrays into sub-arrays. The idea is that
    each image (cpu) will calculate the given schemes for their sub-array, and then report back their solutions. In theory
    this should speed up the runtime of some program.

mod_linalg:
    Contains all necessary numerical linear algebra procedures.
