    pure function qr_algorithm_kind64(A) result(A_schur)

        real(real64), intent(in), dimension(:,:) :: A
        real(real64), dimension(size(A,1), size(A,2)) :: A_schur, A_k, Q_k, R_k
        real(real64), parameter :: eps = 1e-10
        real(real64) :: mu, wilkinson_shift, rayleigh_shift, delta, b
        integer :: i, k, l, n

        n = size(A_k, 1)
        A_k = upper_hessenberg(A)
        
        do k = 1, 2500
            rayleigh_shift = A_k(n,n)
            delta = ( A_k(n,n) - A_k(n-1,n-1) )/2.
            b = (A_k(n,n-1) * A_k(n-1,n))
            if (delta > 0) then
                wilkinson_shift = A_k(n,n) - b/(abs(delta) + sqrt(delta**2 + b))
            else
                wilkinson_shift = A_k(n,n) + b/(abs(delta) + sqrt(delta**2 + b))
            end if
            mu = rayleigh_shift
            A_k = A_k - mu * identity_matrix(n)
            call qr_decomposition(A_k, Q_k, R_k)
            A_k = matmul(R_k, Q_k) + mu * identity_matrix(n)
            do i = 1, n-1
                if ( A_k(i,i+1) < eps ) then
                    A_k(i, i+1) = 0
                    A_k(i+1, i) = 0
                end if
            end do
        end do
        A_schur = matmul( matmul(transpose(Q_k) , A_k), Q_k )

    end function qr_algorithm_kind64