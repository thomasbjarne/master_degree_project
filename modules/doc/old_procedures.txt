    pure function qr_algorithm_kind64(A) result(A_schur)

        real(real64), intent(in), dimension(:,:) :: A
        real(real64), dimension(size(A,1), size(A,2)) :: A_schur, A_k, Q_k, R_k
        real(real64), parameter :: eps = 1e-10
        real(real64) :: mu, wilkinson_shift, rayleigh_shift, delta, b
        integer :: i, k, l, n

        n = size(A_k, 1)
        A_k = upper_hessenberg(A)
        
        do k = 1, 2500
            rayleigh_shift = A_k(n,n)
            delta = ( A_k(n,n) - A_k(n-1,n-1) )/2.
            b = (A_k(n,n-1) * A_k(n-1,n))
            if (delta > 0) then
                wilkinson_shift = A_k(n,n) - b/(abs(delta) + sqrt(delta**2 + b))
            else
                wilkinson_shift = A_k(n,n) + b/(abs(delta) + sqrt(delta**2 + b))
            end if
            mu = rayleigh_shift
            A_k = A_k - mu * identity_matrix(n)
            call qr_decomposition(A_k, Q_k, R_k)
            A_k = matmul(R_k, Q_k) + mu * identity_matrix(n)
            do i = 1, n-1
                if ( A_k(i,i+1) < eps ) then
                    A_k(i, i+1) = 0
                    A_k(i+1, i) = 0
                end if
            end do
        end do
        A_schur = matmul( matmul(transpose(Q_k) , A_k), Q_k )

    end function qr_algorithm_kind64

-----------------------------------

pure function bowyer_watson(P) result(triangulation)

    real, intent(in), dimension(:,:) :: P
    type(triangle), dimension(size(P,1)*10) :: triangulation
    type(triangle), dimension(size(P,1)*10) :: bad_triangles
    type(triangle), dimension(size(P,1)*10) :: all_triangles
    type(triangle) :: supertriangle
    type(circle), dimension(size(all_triangles)) :: all_circumcircles
    real, dimension(3, 2) :: supertriangle_vertices, triangle_vertices
    integer :: i, j, k, l, n, g

    g = size(P,1)
    all_triangles = triangle(0,0)
    supertriangle_vertices(1,:) = [minval(P(:,1))-maxval(P(:,1)), minval(P(:,2))-1.]
    supertriangle_vertices(2,:) = [2*maxval(P(:,1)), minval(P(:,2))-1.]
    supertriangle_vertices(3,:) = [(maxval(P(:,1))+minval(P(:,1)))/2., 2*maxval(P(:,2))+1.]
    supertriangle = triangle(index=0, vertices=supertriangle_vertices)
    all_triangles(1) = supertriangle

    ! Create all possible triangles from pointset and supertriangle_vertices
    do i = 1, g
        bad_triangles = triangle(0,0)
        do j = 1, 3
            triangle_vertices(1,:) = P(i,:)
            if (j == 3) then
                triangle_vertices(2,:) = supertriangle_vertices(3,:)
                triangle_vertices(3,:) = supertriangle_vertices(1,:)
            else
                triangle_vertices(2,:) = supertriangle_vertices(j,:)
                triangle_vertices(3,:) = supertriangle_vertices(j+1,:)
            end if
            all_triangles(j+i) = triangle(index=j+i, &
            vertices=triangle_vertices)
            if (i > 1) then
                do k = i-1, 1, -1
                    triangle_vertices(1,:) = P(i,:)
                    triangle_vertices(2,:) = P(i-k,:)
                    triangle_vertices(3,:) = supertriangle_vertices(j,:)
                    all_triangles(j+i+k+g) = triangle(index=j+i+k, &
                    vertices = triangle_vertices)
                end do
            end if
        end do
    end do

    ! Create all circumcircles for all_triangles
    do i = 1, size(all_triangles)
        all_circumcircles(i) = circle( &
            radius=norm2(all_triangles(i) % vertices(1,:) - all_triangles(i) % circumcenter(1,:)), &
            center=all_triangles(i) % circumcenter)
    end do

    ! Add triangles with vertices inside some circumcircle to bad_triangles
    do i = 1, size(all_triangles)
        do j = 1, 3
            do k = 1, size(all_circumcircles)
                if (norm2(all_triangles(i) % vertices(j,:) - all_circumcircles(k) % center(1,:)) &
                < all_circumcircles(k) % radius) then
                    bad_triangles(i) = all_triangles(i)
                end if
            end do
        end do
    end do

    triangulation(:) = all_triangles(:)

end function bowyer_watson
