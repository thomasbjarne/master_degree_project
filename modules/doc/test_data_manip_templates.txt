!test high_to_low_diag and low_to_high_diag
    
    real(real64), dimension(20,20) :: A, A_high_to_low, A_low_to_high
    integer :: i

    A = 0
    do i = 1, size(A,1)
        A(i,i) = 73*1e-14
    end do
    A(1,1) = -59
    A(2,2) = 393
    A(3,3) = 2
    A(4,4) = -1

    A_high_to_low = high_to_low_diag(A)
    A_low_to_high = low_to_high_diag(A)
    call write_to_file(A,1)
    call write_to_file(A_high_to_low, 2)
    call write_to_file(A_low_to_high, 3)

------------------------------------------

! We test the union subroutine: STATUS : WORKING
	
	real, dimension(:), allocatable :: set
	real :: some_float

	allocate(set(3))
	set = [1., 2., 3.]
	some_float = 19.14

	print*, set
	call union_real(some_float, set)
	print*, set 

-----------------------------------------

!We test in_real: STATUS : WORKS

	real :: a = 2
	real, dimension(3) :: set
	logical :: result

	set = 0

	result = in_real(a, set)

	print*, result

--------------------------------------------

!We test in_line: STATUS : WORKS

	type(line) :: a
	type(line), dimension(3) :: set
	logical :: result

	a%p1(1,1) = 0
	a%p1(1,2) = 0
	a%p2(1,1) = 0
	a%p2(1,2) = 1

	set = line(0,0)
	set(2)%p1(1,1) = 0
	set(2)%p1(1,2) = 0
	set(2)%p2(1,1) = 0
	set(2)%p2(1,2) = 1

	result = in_line(a, set)

	print*, result

-------------------------------------

! We test in_triangle : STATUS : WORKING

	type(triangle) :: t
	type(triangle), dimension(3) :: triangulation
	logical :: result
	real, dimension(3,2) :: t_vertices

	t_vertices(:,1) = [0, 1, 2]
	t_vertices(:,2) = [0, 1, 0]

	t = triangle(vertices=t_vertices)

	triangulation = triangle(vertices=0)

	result = in_triangle(t, triangulation)

	print*, result
	

