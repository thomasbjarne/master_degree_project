-------------------------
cell-centered-quadrilateral-cells

TEST AREA

	integer, parameter :: n = 10
	integer :: fileunit, i, j, k
	type(quadrilateral), dimension(n,n) :: squarecells
	real, dimension(n+1) :: x, y

	call cell_centered_quadrilateral_grid(0., 10., 0., 10., n, x, y, squarecells)

	
	
	open(newunit=fileunit, file='data/datafile1.txt')

	do i = 1, n
		do j = 1, n
			write(unit=fileunit, fmt=*) squarecells(i,j) % area
		end do
	end do

	close(unit=fileunit)

----------------------------------

cell-centered-quadrilateral-cells

TEST VERTICES

	integer, parameter :: n = 10
	integer :: fileunit, i, j, k
	type(quadrilateral), dimension(n,n) :: squarecells
	real, dimension(n+1) :: x, y

	call cell_centered_quadrilateral_grid(0., 10., 0., 10., n, x, y, squarecells)

	print*, 'Area of cell (n,n) is ', squarecells(n,n) % area
	
	open(newunit=fileunit, file='data/datafile1.txt')

	do i = 1, n
		do j = 1, n
			do k = 1, 4
				write(unit=fileunit, fmt=*) squarecells(i,j) % vertices(k,:)
			end do
		end do
	end do

	close(unit=fileunit)

-----------------------------------------

!We test our bowyer_watson implementation

	real, dimension(20, 2) :: pointset
	type(triangle), dimension(:), allocatable :: triangulation
	integer :: i, j, fileunit

	do i = 1, 10
		pointset(i,1) = i
		pointset(i+10, 1) = i
	end do
	pointset(1:10,2) = 1
	pointset(11:20,2) = 2

	triangulation = bowyer_watson(pointset)

	open(newunit=fileunit, file='data/datafile1.txt')

	do i = 1, size(triangulation)
		do j = 1, 3
			write(unit=fileunit, fmt=*) triangulation(i) % vertices(j,:)
		end do
	end do

	close(unit=fileunit)
